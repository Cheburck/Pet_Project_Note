version: '3.8'  

services:
  database:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 3s
      retries: 10

  backend:
    build: ./backend
    restart: always
    environment:
      DB_SERVER: ${DB_SERVER} 
      DB_PORT: ${DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection}
    ports:
      - 127.0.0.1:8080:8080  
    depends_on:
      database:
        condition: service_healthy

  frontend:
    build: ./frontend
    restart: always
    environment:
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    ports:
      - 127.0.0.1:80:80  
    depends_on:
      backend:
        condition: service_started      

volumes:
  postgres:
